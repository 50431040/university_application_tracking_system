generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         String    // 'student', 'parent', 'teacher', 'admin'
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Student {
  id               String    @id @default(uuid())
  userId           String    @unique @map("user_id")
  name             String
  email            String    @unique
  graduationYear   Int?      @map("graduation_year")
  gpa              Decimal?  @db.Decimal(3,2)
  satScore         Int?      @map("sat_score")
  actScore         Int?      @map("act_score")
  targetCountries  String[]  @map("target_countries")
  intendedMajors   String[]  @map("intended_majors")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@map("students")
}

model University {
  id                String      @id @default(uuid())
  name              String
  country           String?
  state             String?
  city              String?
  usNewsRanking     Int?        @map("us_news_ranking")
  acceptanceRate    Decimal?    @db.Decimal(4,2) @map("acceptance_rate")
  applicationSystem String?     @map("application_system") // 'Common App', 'Coalition', 'Direct'
  tuitionInState    Decimal?    @db.Decimal(10,2) @map("tuition_in_state")
  tuitionOutState   Decimal?    @db.Decimal(10,2) @map("tuition_out_state")
  applicationFee    Decimal?    @db.Decimal(6,2) @map("application_fee")
  deadlines         Json?       // {early_decision: 'date', regular: 'date', early_action: 'date', regular_decision: 'date', rolling_admission: 'date'}
  availableMajors   String[]    @map("available_majors")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  @@map("universities")
}

model UniversityRequirement {
  id                   String   @id @default(uuid())
  universityId         String   @map("university_id")
  requirementType      String   @map("requirement_type") // 'essay', 'recommendation', 'transcript', 'portfolio', 'interview'
  isRequired           Boolean  @default(true) @map("is_required")
  description          String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@unique([universityId, requirementType])
  @@map("university_requirements")
}

model Application {
  id               String    @id @default(uuid())
  studentId        String    @map("student_id")
  universityId     String    @map("university_id")
  applicationType  String    @map("application_type") // 'Early Decision', 'Early Action', 'Regular Decision', 'Rolling Admission'
  deadline         DateTime
  status           String    @default("not_started") // 'not_started', 'in_progress', 'submitted', 'under_review', 'decided'
  submittedDate    DateTime? @map("submitted_date")
  decisionDate     DateTime? @map("decision_date")
  decisionType     String?   @map("decision_type") // 'accepted', 'rejected', 'waitlisted'
  notes            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  @@unique([studentId, universityId, applicationType])
  @@map("applications")
}

model ApplicationRequirement {
  id                String    @id @default(uuid())
  applicationId     String    @map("application_id")
  requirementType   String    @map("requirement_type") // 'essay', 'recommendation', 'transcript'
  status            String    @default("not_started") // 'not_started', 'in_progress', 'completed'
  deadline          DateTime?
  notes             String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("application_requirements")
}

model StudentParentRelationship {
  id        String   @id @default(uuid())
  studentId String   @map("student_id")
  parentId  String   @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([studentId, parentId])
  @@map("student_parent_relationships")
}

model ParentNote {
  id            String   @id @default(uuid())
  parentId      String   @map("parent_id")
  studentId     String   @map("student_id")
  applicationId String   @map("application_id")
  note          String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("parent_notes")
}